'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';

interface ExampleQuery {
  id: number;
  title: string;
  description: string;
  query: string;
  category: string;
}

export default function ExampleQueries() {
  const [theme, setTheme] = useState<'light' | 'dark'>('light');
  const [mounted, setMounted] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  // Initialize theme
  useEffect(() => {
    setMounted(true);
    const savedTheme = window.localStorage.getItem('datasense-theme') as 'light' | 'dark' | null;
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const initialTheme = savedTheme || (systemPrefersDark ? 'dark' : 'light');
    
    setTheme(initialTheme);
    
    if (initialTheme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, []);

  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
    
    if (newTheme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    
    window.localStorage.setItem('datasense-theme', newTheme);
  };

  const exampleQueries: ExampleQuery[] = [
    {
      id: 1,
      title: "Show all distributors",
      description: "Get a complete list of all distributors in the system",
      query: "Show all distributors",
      category: "distributors"
    },
    {
      id: 2,
      title: "List all products with their current stock",
      description: "Display products along with their current inventory levels",
      query: "List all products with their current stock",
      category: "inventory"
    },
    {
      id: 3,
      title: "Show recent orders from this month",
      description: "Get orders placed in the current month",
      query: "Show recent orders from this month",
      category: "orders"
    },
    {
      id: 4,
      title: "Calculate total revenue by distributor",
      description: "Sum up revenue generated by each distributor",
      query: "Calculate total revenue by distributor",
      category: "revenue"
    },
    {
      id: 5,
      title: "Find products with low stock levels",
      description: "Identify products that need restocking",
      query: "Find products with low stock levels",
      category: "inventory"
    },
    {
      id: 6,
      title: "Show pending returns",
      description: "Display all return requests that are still pending",
      query: "Show pending returns",
      category: "returns"
    }
  ];

  const categories = [
    { value: 'all', label: 'All Categories' },
    { value: 'distributors', label: 'Distributors' },
    { value: 'inventory', label: 'Inventory' },
    { value: 'orders', label: 'Orders' },
    { value: 'revenue', label: 'Revenue' },
    { value: 'returns', label: 'Returns' }
  ];

  const filteredQueries = selectedCategory === 'all' 
    ? exampleQueries 
    : exampleQueries.filter(q => q.category === selectedCategory);

  const copyToClipboard = (query: string) => {
    navigator.clipboard.writeText(query);
    // You could add a toast notification here
  };

  const useQuery = (query: string) => {
    // Store the query in localStorage to be picked up by the main page
    localStorage.setItem('selected-query', query);
    // Navigate back to main page
    window.location.href = '/';
  };

  if (!mounted) {
    return null;
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-200">
      {/* Header */}
      <header className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 sticky top-0 z-10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center gap-4">
              <Link href="/" className="flex items-center gap-3 text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                <span className="font-medium">Back to Chat</span>
              </Link>
              <div className="h-6 w-px bg-gray-300 dark:bg-gray-600" />
              <h1 className="text-xl font-semibold text-gray-900 dark:text-white">
                Example Queries
              </h1>
            </div>

            <button
              onClick={toggleTheme}
              className="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
              aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}
            >
              {theme === 'light' ? (
                <svg className="w-5 h-5 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                </svg>
              ) : (
                <svg className="w-5 h-5 text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                </svg>
              )}
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Hero Section */}
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
            Explore Example Queries
          </h2>
          <p className="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
            Get started with these pre-built queries. Click on any query to use it in your chat, or copy it to customize further.
          </p>
        </div>

        {/* Category Filter */}
        <div className="mb-8">
          <div className="flex flex-wrap gap-2 justify-center">
            {categories.map((category) => (
              <button
                key={category.value}
                onClick={() => setSelectedCategory(category.value)}
                className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${
                  selectedCategory === category.value
                    ? 'text-white'
                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700'
                }`}
                style={selectedCategory === category.value ? { backgroundColor: '#08834d' } : {}}
              >
                {category.label}
              </button>
            ))}
          </div>
        </div>

        {/* Query Grid */}
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {filteredQueries.map((query) => (
            <div
              key={query.id}
              className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 hover:shadow-lg dark:hover:shadow-gray-900/25 transition-all duration-200 group"
            >
              <div className="mb-4">
                <span className="inline-block px-3 py-1 text-xs font-medium text-white rounded-full mb-3"
                  style={{ backgroundColor: '#08834d' }}
                >
                  {query.category}
                </span>
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                  {query.title}
                </h3>
                <p className="text-gray-600 dark:text-gray-400 text-sm">
                  {query.description}
                </p>
              </div>

              <div className="bg-gray-50 dark:bg-gray-900/50 rounded-lg p-3 mb-4">
                <code className="text-sm text-gray-800 dark:text-gray-200 font-mono">
                  "{query.query}"
                </code>
              </div>

              <div className="flex gap-2">
                <button
                  onClick={() => useQuery(query.query)}
                  className="flex-1 text-white text-sm font-medium py-2 px-4 rounded-lg transition-colors hover:bg-green-700"
                  style={{ backgroundColor: '#08834d' }}
                >
                  Use Query
                </button>
                <button
                  onClick={() => copyToClipboard(query.query)}
                  className="p-2 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
                  title="Copy to clipboard"
                >
                  <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                  </svg>
                </button>
              </div>
            </div>
          ))}
        </div>

        {filteredQueries.length === 0 && (
          <div className="text-center py-12">
            <div className="w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0012 15c-2.34 0-4.513.751-6.283 2.018A7.962 7.962 0 013 18.001M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
              No queries found
            </h3>
            <p className="text-gray-600 dark:text-gray-400">
              Try selecting a different category.
            </p>
          </div>
        )}
      </main>
    </div>
  );
}